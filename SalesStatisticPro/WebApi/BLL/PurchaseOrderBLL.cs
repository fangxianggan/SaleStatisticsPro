//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
//       如存在本生成代码外的新需求，请在相同命名空间下创建同名分部类进行实现。
// </auto-generated>
//
// <copyright file="PurchaseOrderBLL.cs">
//        Copyright(c)2013 GMFCN.All rights reserved.
//        CLR版本：4.0.30319.239
//        开发组织：yxd
//        生成时间：2020-02-04 15:45
// </copyright>
//------------------------------------------------------------------------------
using EntitiesModels.Models;
using FXKJ.Infrastructure.Logic;
using WebApi.IRepository;
using WebApi.IBLL;
using FXKJ.Infrastructure.Entities.QueryModel;
using System.Threading.Tasks;
using EntitiesModels.DtoModels;
using FXKJ.Infrastructure.Entities.HttpResponse;
using FXKJ.Infrastructure.DataAccess;
using System.Collections.Generic;
using System;
using System.Transactions;
using FXKJ.Infrastructure.Entities.Enum;
using FXKJ.Infrastructure.Core.Extensions;
using System.Linq;
using static EntitiesModels.DtoEnum.OrderEnum;
using System.Data;
using FXKJ.Infrastructure.Core.Util;
using FXKJ.Infrastructure.Core.Helper;

namespace WebApi.BLL
{
    /// <summary>
    ///   业务访问——PurchaseOrder
    /// </summary>
    public partial class PurchaseOrderBLL : IPurchaseOrderBLL
    {

        /// <summary>
        /// 构造函数依赖注入
        /// </summary>
        private readonly IEFRepository<PurchaseOrder> _purchaseOrderEFRepository;
        /// <summary>
        /// 
        /// </summary>
        private readonly IEFRepository<PurchaseOrderInfo> _purchaseOrderInfoEFRepository;

        private readonly IPurchaseOrderRepository _purchaseOrderRepository;

        private readonly IPurchaseOrderInfoRepository _purchaseOrderInfoRepository;


        /// <summary>
        /// 部分类 依赖注入  必须要把之前注入的继承下
        /// </summary>
        /// <param name="purchaseOrderEFRepository"></param>
        /// <param name="purchaseOrderInfoEFRepository"></param>
        /// <param name="purchaseOrderRepository"></param>
        /// <param name="purchaseOrderInfoRepository"></param>
        /// <param name="logic"></param>
        public PurchaseOrderBLL(
            IEFRepository<PurchaseOrder> purchaseOrderEFRepository,
            IEFRepository<PurchaseOrderInfo> purchaseOrderInfoEFRepository,
            IPurchaseOrderRepository purchaseOrderRepository,
            IPurchaseOrderInfoRepository purchaseOrderInfoRepository,
            ILogic<PurchaseOrder> logic)
            : this(logic)
        {
            _purchaseOrderInfoEFRepository = purchaseOrderInfoEFRepository;
            _purchaseOrderEFRepository = purchaseOrderEFRepository;
            _purchaseOrderRepository = purchaseOrderRepository;
            _purchaseOrderInfoRepository = purchaseOrderInfoRepository;

        }



        /// <summary>
        /// 
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public HttpReponseModel<PurchaseOrderViewModel> SaveData(PurchaseOrderViewModel model)
        {
            HttpReponseModel<PurchaseOrderViewModel> httpReponse = new HttpReponseModel<PurchaseOrderViewModel>();
            ////// 事务附件消息
            TransactionOptions transactionOption = new TransactionOptions();
            //设置事务隔离级别
            transactionOption.IsolationLevel = System.Transactions.IsolationLevel.ReadCommitted;
            // 设置事务超时时间为60秒
            transactionOption.Timeout = new TimeSpan(0, 0, 60);
            //启动一个分布式事务
            using (TransactionScope scope = new TransactionScope(TransactionScopeOption.Required, transactionOption))
            {
                try
                {
                    PurchaseOrder purchaseOrder = AutoMapperExtension.MapTo<PurchaseOrder>(model);
                    List<PurchaseOrderInfo> purchaseOrderInfos = AutoMapperExtension.MapToList<PurchaseOrderInfo>(model.PurchaseOrderInfoViewModels);

                    if (purchaseOrder.ID == 0)
                    {
                        _purchaseOrderEFRepository.Add(purchaseOrder);
                    }
                    else
                    {
                        _purchaseOrderInfoEFRepository.Delete(p => p.POrderNum == purchaseOrder.POrderNum);
                        _purchaseOrderEFRepository.Update(purchaseOrder);
                        purchaseOrderInfos.ForEach(p => p.ID = 0);
                    }
                    _purchaseOrderInfoEFRepository.AddList(purchaseOrderInfos);

                }
                catch (Exception ex)
                {
                    //错误
                    httpReponse.ResultSign = ResultSign.Error;
                    httpReponse.Message = ex.Message;
                    httpReponse.Code = StatusCode.InternalServerError;
                    httpReponse.Flag = false;
                }
                finally
                {
                    if (httpReponse.Flag)
                    {
                        httpReponse.Data = model;
                        httpReponse.ResultSign = ResultSign.Successful;
                        httpReponse.Message = "数据操作成功";
                        httpReponse.Code = StatusCode.OK;
                       scope.Complete();
                    }
                }
                return httpReponse;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public HttpReponseModel<int> GetDel(string orderNumber)
        {

            HttpReponseModel<int> httpReponse = new HttpReponseModel<int>();
            //// 事务附件消息
            TransactionOptions transactionOption = new TransactionOptions();
            //设置事务隔离级别
            transactionOption.IsolationLevel = System.Transactions.IsolationLevel.ReadCommitted;
            // 设置事务超时时间为60秒
            transactionOption.Timeout = new TimeSpan(0, 0, 60);
            //启动一个分布式事务
            using (TransactionScope scope = new TransactionScope(TransactionScopeOption.Required, transactionOption))
            {
                try
                {
                    _purchaseOrderEFRepository.Delete(p => p.POrderNum == orderNumber);
                    _purchaseOrderInfoEFRepository.Delete(p => p.PPOrderNum == orderNumber);
                }
                catch (Exception ex)
                {
                    //错误
                    httpReponse.ResultSign = ResultSign.Error;
                    httpReponse.Message = ex.Message;
                    httpReponse.Code = StatusCode.InternalServerError;
                    httpReponse.Flag = false;
                }
                finally
                {
                    if (httpReponse.Flag)
                    {
                        httpReponse.ResultSign = ResultSign.Successful;
                        httpReponse.Message = "数据操作成功";
                        httpReponse.Code = StatusCode.OK;
                        httpReponse.Flag = true;
                        scope.Complete();
                    }
                }

                return httpReponse;

            }
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public HttpReponseModel<List<PurchaseOrderViewModel>> GetPurchaseOrderPageList(QueryModel model)
        {
            HttpReponseModel<List<PurchaseOrderViewModel>> httpReponse = new HttpReponseModel<List<PurchaseOrderViewModel>>();
            httpReponse.Data = _purchaseOrderRepository.GetPurchaseOrderViewModelPageList(model) as List<PurchaseOrderViewModel>;
            httpReponse.Total = model.Total;
            httpReponse.PageIndex = model.PageIndex;
            httpReponse.PageSize = model.PageSize;
            return httpReponse;
        }

        /// <summary>
        /// 获取库存列表
        /// </summary>
        /// <returns></returns>
        public HttpReponseModel<List<ProductStockViewModel>> GetProductStockViewModelList(string keyName)
        {
            HttpReponseModel<List<ProductStockViewModel>> httpReponse = new HttpReponseModel<List<ProductStockViewModel>>();
            httpReponse.Data = _purchaseOrderRepository.GetProductStockViewModelList(keyName, "") as List<ProductStockViewModel>;
            return httpReponse;
        }

        /// <summary>
        /// /校验库存
        /// </summary>
        /// <param name="productCode"></param>
        /// <param name="saleCount"></param>
        /// <returns></returns>
        public HttpReponseModel<int> CheckProductStock(string productCode, int saleCount)
        {
            HttpReponseModel<int> httpReponse = new HttpReponseModel<int>();
            var list = _purchaseOrderRepository.GetProductStockViewModelList("", productCode) as List<ProductStockViewModel>;
            var ent = list.Find(p => p.ProductStock >= saleCount);
            if (ent != null)
            {
                httpReponse.ResultSign = ResultSign.Successful;
                httpReponse.Message = "";
            }
            else
            {
                httpReponse.ResultSign = ResultSign.Error;
                httpReponse.Message = "库存不足";
            }
            return httpReponse;
        }


        /// <summary>
        /// 返回要需要签收的单子
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public HttpReponseModel<int> GetPurchaseOrderInfoDoSign(string orderNumber)
        {
            HttpReponseModel<int> httpReponse = new HttpReponseModel<int>();
            var list = _purchaseOrderInfoEFRepository.GetList(p => p.POrderNum == orderNumber);
            var signCount = list.Where(p => p.PurchaseOrderInfoState == OrderState.SS03.ToString()
           ||
          p.PurchaseOrderInfoState == OrderState.SS04.ToString()).Count();
            if (list.Count == signCount)
            {
                httpReponse.ResultSign = ResultSign.Successful;
                httpReponse.Data = 0;
                httpReponse.Message = "";
            }
            else
            {
                int count = list.Count - signCount;
                httpReponse.ResultSign = ResultSign.Warning;
                httpReponse.Data = count;
                httpReponse.Message = "该进货单还有<span style='color:red;'>" + count + "</span>个单子未签收,<span style='color:red;'>是否默认变更签收锁定</span>";
            }
            return httpReponse;
        }


        /// <summary>
        /// 锁定这个进货单
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>

        public HttpReponseModel<int> GetPurchaseOrderInfoLock(string orderNumber)
        {
            HttpReponseModel<int> httpReponse = new HttpReponseModel<int>();
            //// 事务附件消息
            TransactionOptions transactionOption = new TransactionOptions();
            //设置事务隔离级别
            transactionOption.IsolationLevel = System.Transactions.IsolationLevel.ReadCommitted;
            // 设置事务超时时间为60秒
            transactionOption.Timeout = new TimeSpan(0, 0, 60);
            //启动一个分布式事务
            using (TransactionScope scope = new TransactionScope(TransactionScopeOption.Required, transactionOption))
            {
                try
                {

                    var orderEnt = _purchaseOrderEFRepository.GetEntity(p => p.POrderNum == orderNumber);
                    var list = _purchaseOrderInfoEFRepository.GetList(p => p.POrderNum == orderNumber && (!(p.PurchaseOrderInfoState == OrderState.SS03.ToString()
                   ||
                  p.PurchaseOrderInfoState == OrderState.SS04.ToString())));

                    foreach (var item in list)
                    {
                        item.PurchaseOrderInfoState = OrderState.SS03.ToString();
                    }

                    orderEnt.PurchaseOrderState = OrderState.FF02.ToString();
                    _purchaseOrderEFRepository.Update(orderEnt);
                    _purchaseOrderInfoEFRepository.UpdateList(list);
                }
                catch (Exception ex)
                {
                    //错误
                    httpReponse.ResultSign = ResultSign.Error;
                    httpReponse.Message = ex.Message;
                    httpReponse.Code = StatusCode.InternalServerError;
                    httpReponse.Flag = false;
                }
                finally
                {
                    if (httpReponse.Flag)
                    {
                        httpReponse.ResultSign = ResultSign.Successful;
                        httpReponse.Message = "数据操作成功";
                        httpReponse.Flag = true;
                        httpReponse.Code = StatusCode.OK;
                        scope.Complete();
                    }
                }
            }

            return httpReponse;
        }

        /// <summary>
        /// 验证订单号是不是重复
        /// </summary>
        /// <param name="id"></param>
        /// <param name="pOrderNum"></param>
        /// <returns></returns>
        public HttpReponseModel<int> GetPOrderNumIsExist(int id, string pOrderNum)
        {
            HttpReponseModel<int> httpReponse = new HttpReponseModel<int>();
            var list = _purchaseOrderEFRepository.GetList(p => p.POrderNum == pOrderNum);
            int count = list.Count;
            if (id > 0)
            {
                var ent = list.Find(p => p.ID == id);
                if (ent != null)
                {
                    count = 0;
                    httpReponse.Message = "";
                    httpReponse.ResultSign = ResultSign.Successful;
                }
                else
                {
                    httpReponse.Message = "已重复";
                    httpReponse.ResultSign = ResultSign.Warning;
                    count = list.Count;
                }
            }
            else
            {
                if (count > 0)
                {
                    httpReponse.Message = "已重复";
                    httpReponse.ResultSign = ResultSign.Warning;
                }
            }
            httpReponse.Data = count;
            return httpReponse;
        }

        public HttpReponseModel<FileStreamViewModel> GetPurchaseListViewModelExportExcel(QueryModel model)
        {
            HttpReponseModel<FileStreamViewModel> httpReponse = new HttpReponseModel<FileStreamViewModel>();
            string fileName = DateTime.Now.ToString("yyyyMMddhhmmss") + ".xls";


            DataTable dt1 = _purchaseOrderInfoRepository.GetPurchaseOrderInfoViewModelDataTable(model);
            dt1.TableName = "进货统计表";

            DataTable dt2 = _purchaseOrderRepository.GetPurchaseOrderViewModelDataTable(model);
            dt2.TableName = "进货统计表";

            //列名称显示中文
            PurchaseOrderStatisticsViewModel t = new PurchaseOrderStatisticsViewModel();
            var dic = DisplayNameUtil.DisplayNameModel(t);
            ExportHelper.SetColumnNameDisplayName(true, dic);

            var stream = ExportHelper.ExportMegerData(dt1,dt2);
            var fileInfo = Convert.ToBase64String(stream.ToArray());
            FileStreamViewModel fileStream = new FileStreamViewModel();
            fileStream.Content = JsonUtil.JsonSerialize(fileInfo);
            fileStream.FileName = fileName;
            httpReponse.Data = fileStream;
            return httpReponse;
        }
    }
}

