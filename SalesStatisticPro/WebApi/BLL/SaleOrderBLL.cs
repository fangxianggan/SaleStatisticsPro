//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
//       如存在本生成代码外的新需求，请在相同命名空间下创建同名分部类进行实现。
// </auto-generated>
//
// <copyright file="SaleOrderBLL.cs">
//        Copyright(c)2013 GMFCN.All rights reserved.
//        CLR版本：4.0.30319.239
//        开发组织：yxd
//        生成时间：2020-02-04 15:45
// </copyright>
//------------------------------------------------------------------------------
using EntitiesModels.Models;
using FXKJ.Infrastructure.Logic;
using WebApi.IRepository;
using WebApi.IBLL;
using FXKJ.Infrastructure.Entities.QueryModel;
using System.Threading.Tasks;
using EntitiesModels.DtoModels;
using FXKJ.Infrastructure.Entities.HttpResponse;
using FXKJ.Infrastructure.DataAccess;
using System.Collections.Generic;
using System;
using FXKJ.Infrastructure.Core.Extensions;
using System.Transactions;
using FXKJ.Infrastructure.Entities.Enum;
using static EntitiesModels.DtoEnum.OrderEnum;
using System.Linq;
using System.Data;
using FXKJ.Infrastructure.Core.Util;
using FXKJ.Infrastructure.Core.Helper;

namespace WebApi.BLL
{
    /// <summary>
    ///   业务访问——SaleOrder
    /// </summary>
    public partial class SaleOrderBLL : ISaleOrderBLL
    {
        /// <summary>
        /// 构造函数依赖注入
        /// </summary>
        private readonly IEFRepository<SaleOrder> _saleOrderEFRepository;
        /// <summary>
        /// 
        /// </summary>
        private readonly IEFRepository<SaleOrderInfo> _saleOrderInfoEFRepository;

        private readonly ISaleOrderRepository _saleOrderRepository;

        private readonly ISaleOrderInfoRepository _saleOrderInfoRepository;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="saleOrderInfoRepository"></param>
        /// <param name="saleOrderRepository"></param>
        /// <param name="saleOrderEFRepository"></param>
        /// <param name="saleOrderInfoEFRepository"></param>
        /// <param name="logic"></param>
        public SaleOrderBLL(ISaleOrderInfoRepository saleOrderInfoRepository, ISaleOrderRepository saleOrderRepository, IEFRepository<SaleOrder> saleOrderEFRepository, IEFRepository<SaleOrderInfo> saleOrderInfoEFRepository, ILogic<SaleOrder> logic)
            : this(logic)
        {
            _saleOrderInfoRepository = saleOrderInfoRepository;
            _saleOrderRepository = saleOrderRepository;
            _saleOrderEFRepository = saleOrderEFRepository;
            _saleOrderInfoEFRepository = saleOrderInfoEFRepository;
        }



        /// <summary>
        /// 
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public HttpReponseModel<SaleOrderViewModel> SaveData(SaleOrderViewModel model)
        {
            HttpReponseModel<SaleOrderViewModel> httpReponse = new HttpReponseModel<SaleOrderViewModel>();
            ////// 事务附件消息
            TransactionOptions transactionOption = new TransactionOptions();
            //设置事务隔离级别
            transactionOption.IsolationLevel = System.Transactions.IsolationLevel.ReadCommitted;
            // 设置事务超时时间为60秒
            transactionOption.Timeout = new TimeSpan(0, 0, 60);
            //启动一个分布式事务
            using (TransactionScope scope = new TransactionScope(TransactionScopeOption.Required, transactionOption))
            {
                try
                {
                    SaleOrder saleOrder = AutoMapperExtension.MapTo<SaleOrder>(model);
                    List<SaleOrderInfo> saleOrderInfos = AutoMapperExtension.MapToList<SaleOrderInfo>(model.SaleOrderInfoViewModels);
                    if (saleOrder.ID == 0)
                    {
                        _saleOrderEFRepository.Add(saleOrder);
                    }
                    else
                    {
                        _saleOrderInfoEFRepository.Delete(p => p.SOrderNum == saleOrder.SOrderNum);
                        _saleOrderEFRepository.Update(saleOrder);
                        foreach (var item in saleOrderInfos)
                        {
                            item.ID = 0;
                        }

                    }
                    _saleOrderInfoEFRepository.AddList(saleOrderInfos);
                }
                catch (Exception ex)
                {
                    //错误
                    httpReponse.ResultSign = ResultSign.Error;
                    httpReponse.Message = ex.Message;
                    httpReponse.Code = StatusCode.InternalServerError; 
                    httpReponse.Flag = false;
                }
                finally
                {
                    if (httpReponse.Flag)
                    {
                        httpReponse.Data = model;
                        httpReponse.ResultSign = ResultSign.Successful;
                        httpReponse.Message = "数据操作成功";
                        httpReponse.Code = StatusCode.OK;
                        httpReponse.Flag = true;
                        scope.Complete();
                    }
                }
                return httpReponse;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="query"></param>
        /// <returns></returns>
        public HttpReponseModel<List<SaleOrderViewModel>> GetSaleOrderViewModePageList(QueryModel query)
        {
            HttpReponseModel<List<SaleOrderViewModel>> httpReponse = new HttpReponseModel<List<SaleOrderViewModel>>();
            httpReponse.Data = _saleOrderRepository.GetSaleOrderViewModelPageList(query) as List<SaleOrderViewModel>;
            return httpReponse;
        }


        /// <summary>
        /// 删除
        /// </summary>
        /// <param name="sOrderNum"></param>
        /// <returns></returns>
        public HttpReponseModel<int> GetDel(string sOrderNum)
        {

            HttpReponseModel<int> httpReponse = new HttpReponseModel<int>();
            //// 事务附件消息
            TransactionOptions transactionOption = new TransactionOptions();
            //设置事务隔离级别
            transactionOption.IsolationLevel = System.Transactions.IsolationLevel.ReadCommitted;
            // 设置事务超时时间为60秒
            transactionOption.Timeout = new TimeSpan(0, 0, 60);
            //启动一个分布式事务
            using (TransactionScope scope = new TransactionScope(TransactionScopeOption.Required, transactionOption))
            {
                try
                {
                    _saleOrderEFRepository.Delete(p => p.SOrderNum == sOrderNum);
                    _saleOrderInfoEFRepository.Delete(p => p.SSOrderNum == sOrderNum);
                }
                catch (Exception ex)
                {
                    //错误
                    httpReponse.ResultSign = ResultSign.Error;
                    httpReponse.Message = ex.Message;
                    httpReponse.Code = StatusCode.InternalServerError;
                    httpReponse.Flag = false;
                }
                finally
                {
                    if (httpReponse.Flag)
                    {
                        httpReponse.ResultSign = ResultSign.Successful;
                        httpReponse.Message = "数据操作成功";
                        httpReponse.Code = StatusCode.OK;
                        httpReponse.ResultSign = ResultSign.Successful;
                        scope.Complete();
                    }
                }

                return httpReponse;

            }
        }

        /// <summary>
        /// 返回要需要签收的单子
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>
        public HttpReponseModel<int> GetSaleOrderInfoDoSign(string orderNumber)
        {
            HttpReponseModel<int> httpReponse = new HttpReponseModel<int>();
            var list = _saleOrderInfoEFRepository.GetList(p => p.SOrderNum == orderNumber);
            var signCount = list.Where(p => p.SaleOrderInfoState == OrderState.SS03.ToString()
           ||
          p.SaleOrderInfoState == OrderState.SS04.ToString()).Count();
            if (list.Count == signCount)
            {
                httpReponse.ResultSign = ResultSign.Successful;
                httpReponse.Data = 0;
                httpReponse.Message = "";
            }
            else
            {
                int count = list.Count - signCount;
                httpReponse.ResultSign = ResultSign.Warning;
                httpReponse.Data = count;
                httpReponse.Message = "该销售订单还有<span style='color:red;'>" + count + "</span>个单子未签收,<span style='color:red;'>是否默认变更签收锁定</span>";
            }
            return httpReponse;
        }


        /// <summary>
        /// 锁定这个销售订单
        /// </summary>
        /// <param name="orderNumber"></param>
        /// <returns></returns>

        public HttpReponseModel<int> GetSaleOrderInfoLock(string orderNumber)
        {
            HttpReponseModel<int> httpReponse = new HttpReponseModel<int>();
            //// 事务附件消息
            TransactionOptions transactionOption = new TransactionOptions();
            //设置事务隔离级别
            transactionOption.IsolationLevel = System.Transactions.IsolationLevel.ReadCommitted;
            // 设置事务超时时间为60秒
            transactionOption.Timeout = new TimeSpan(0, 0, 60);
            //启动一个分布式事务
            using (TransactionScope scope = new TransactionScope(TransactionScopeOption.Required, transactionOption))
            {
                try
                {

                    var orderEnt = _saleOrderEFRepository.GetEntity(p => p.SOrderNum == orderNumber);
                    var list = _saleOrderInfoEFRepository.GetList(p => p.SOrderNum == orderNumber && (!(p.SaleOrderInfoState == OrderState.SS03.ToString()
                   ||
                  p.SaleOrderInfoState == OrderState.SS04.ToString())));

                    foreach (var item in list)
                    {
                        item.SaleOrderInfoState = OrderState.SS03.ToString();
                    }
                    orderEnt.SaleOrderState = OrderState.FF02.ToString();
                    _saleOrderEFRepository.Update(orderEnt);
                    _saleOrderInfoEFRepository.UpdateList(list);
                }
                catch (Exception ex)
                {
                    //错误
                    httpReponse.ResultSign = ResultSign.Error;
                    httpReponse.Message = ex.Message;
                    httpReponse.Code = StatusCode.InternalServerError;
                    httpReponse.Flag = false;
                }
                finally
                {
                    if (httpReponse.Flag)
                    {
                        httpReponse.ResultSign = ResultSign.Successful;
                        httpReponse.Message = "数据操作成功";
                        httpReponse.Flag = true;
                        httpReponse.Code = StatusCode.OK;
                        scope.Complete();
                    }
                }
            }

            return httpReponse;
        }


        public HttpReponseModel<FileStreamViewModel> GetSaleListViewModelExportExcel(QueryModel model)
        {
            HttpReponseModel<FileStreamViewModel> httpReponse = new HttpReponseModel<FileStreamViewModel>();
            string fileName = DateTime.Now.ToString("yyyyMMddhhmmss") + ".xls";


            DataTable dt1 = _saleOrderInfoRepository.GetSaleOrderInfoViewModelDataTable(model);
            dt1.TableName = "销售统计表";

            DataTable dt2 = _saleOrderRepository.GetSaleOrderViewModelDataTable(model);
            dt2.TableName = "销售统计表";

            //列名称显示中文
            SaleOrderStatisticsViewModel t = new SaleOrderStatisticsViewModel();
            var dic = DisplayNameUtil.DisplayNameModel(t);
            ExportHelper.SetColumnNameDisplayName(true, dic);

            var stream = ExportHelper.ExportMegerData(dt1, dt2);
            var fileInfo = Convert.ToBase64String(stream.ToArray());
            FileStreamViewModel fileStream = new FileStreamViewModel();
            fileStream.Content = JsonUtil.JsonSerialize(fileInfo);
            fileStream.FileName = fileName;
            httpReponse.Data = fileStream;
            return httpReponse;
        }
    }
}

